apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: ecommerce-dev
spec:
  serviceName: kafka-headless
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.4.0
          ports:
            - name: internal
              containerPort: 9093
            - name: external
              containerPort: 9094

          # Mantén tu ConfigMap
          envFrom:
            - configMapRef:
                name: kafka-config

          # Estas vars SOBRESCRIBEN lo del ConfigMap (orden importa)
          env:
            # 1) nombre del pod (Downward API)
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            # 2) broker id desde el ordinal (permite escalar sin tocar YAML)
            - name: KAFKA_BROKER_ID_COMMAND
              value: "hostname | awk -F- '{print $NF}'"

            # 3) conexión a Zookeeper
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-service:2181"

            # 4) listeners abiertos (coinciden con los puertos expuestos)
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9094,DOCKER://0.0.0.0:9093"

            # 5) **advertised**: externo por Service, interno por POD (headless + POD_NAME)
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-service:9094,DOCKER://$(POD_NAME).kafka-headless.ecommerce-dev.svc.cluster.local:9093"

          readinessProbe:
            tcpSocket: { port: 9094 }
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            tcpSocket: { port: 9094 }
            initialDelaySeconds: 20
            periodSeconds: 20

          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data

  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: standard
        resources:
          requests:
            storage: 10Gi
